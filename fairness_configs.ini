# Fairness Benchmark Configuration
# Dual-client concurrent execution: steady client vs bursty client
#
# Both clients run simultaneously to demonstrate pagecache fairness issues
#
# Note: rate_iops limits the IOPS per job. With numjobs=8 and rate_iops=1000,
#       total IOPS will be 8 * 1000 = 8000 IOPS max

[client1_steady]
description = Steady client - Sequential read on 16G file
file_size = 16G
# Phase 0: Warm up for a minute
phase_0_numjobs = 1
phase_0_runtime = 30
phase_0_pattern = read
phase_0_block_size = 4k
phase_0_rate_iops = 1000
phase_0_iodepth = 32
phase_0_ioengine = libaio
# Phase 1: Sequential read for 30s
phase_1_numjobs = 1
phase_1_runtime = 30
phase_1_pattern = read
phase_1_block_size = 4k
phase_1_rate_iops = 1000
phase_1_iodepth = 32
phase_1_ioengine = libaio
# Phase 2: Sequential read for 30s
phase_2_numjobs = 1
phase_2_runtime = 30
phase_2_pattern = read
phase_2_block_size = 4k
phase_2_rate_iops = 1000
phase_2_iodepth = 32
phase_2_ioengine = libaio

[client2_bursty]
description = Bursty client - Sequential read on 16G file
file_size = 16G
# Phase 0: Warmup for a minute
phase_0_numjobs = 1
phase_0_runtime = 30
phase_0_pattern = read
phase_0_block_size = 4k
phase_0_rate_iops = 1000
phase_0_iodepth = 32
phase_0_ioengine = libaio
# Phase 1: Sequential read for 30s
phase_1_numjobs = 1
phase_1_runtime = 30
phase_1_pattern = read
phase_1_block_size = 4k
phase_1_rate_iops = 1000
phase_1_iodepth = 32
phase_1_ioengine = libaio
# Phase 2: Random read for 30s
phase_2_numjobs = 1
phase_2_runtime = 30
phase_2_pattern = read
phase_2_block_size = 4k
phase_2_rate_iops = 1000
phase_2_iodepth = 32
phase_2_ioengine = libaio

