# Fairness Benchmark Configuration
# INI-style configuration for C++ benchmark runner
#
# This configuration defines 8 fairness workloads to demonstrate
# pagecache fairness issues between different I/O patterns.

[steady_reader_4k_d1]
description = Steady 4k reader (iodepth=1) - sequential access through 1G file
file_size = 1G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 1
pattern = read

[steady_reader_4k_d32]
description = Steady 4k reader (iodepth=32) - sequential access through 1G file
file_size = 1G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 32
pattern = read
ioengine = libaio

[steady_reader_2M_d1]
description = Steady 4k reader (iodepth=1) - sequential access through 1G file
file_size = 1G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 1
pattern = read

[steady_reader_2M_d32]
description = Steady 4k reader (iodepth=32) - sequential access through 1G file
file_size = 1G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 32
pattern = read
ioengine = libaio

[bursty_reader_4k_d1]
description = Bursty 4k reader (iodepth=1) - random access through 16G file
file_size = 16G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 1
pattern = randread

[bursty_reader_4k_d32]
description = Bursty 4k reader (iodepth=32) - random access through 16G file
file_size = 16G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 32
pattern = randread
ioengine = libaio

[bursty_reader_2M_d1]
description = Bursty 4k reader (iodepth=1) - random access through 16G file
file_size = 16G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 1
pattern = randread

[bursty_reader_2M_d32]
description = Bursty 4k reader (iodepth=32) - random access through 16G file
file_size = 16G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 32
pattern = randread
ioengine = libaio

[steady_writer_4k_d1]
description = Steady 4k writer (iodepth=1) - sequential access through 1G file
file_size = 1G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 1
pattern = write

[steady_writer_4k_d32]
description = Steady 4k writer (iodepth=32) - sequential access through 1G file
file_size = 1G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 32
pattern = write
ioengine = libaio

[steady_writer_2M_d1]
description = Steady 4k writer (iodepth=1) - sequential access through 1G file
file_size = 1G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 1
pattern = write

[steady_writer_2M_d32]
description = Steady 4k writer (iodepth=32) - sequential access through 1G file
file_size = 1G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 32
pattern = write
ioengine = libaio

[bursty_writer_4k_d1]
description = Bursty 4k writer (iodepth=1) - random access through 16G file
file_size = 16G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 1
pattern = randwrite

[bursty_writer_4k_d32]
description = Bursty 4k writer (iodepth=32) - random access through 16G file
file_size = 16G
block_size = 4k
runtime = 60
numjobs = 1
iodepth = 32
pattern = randwrite
ioengine = libaio

[bursty_writer_2M_d1]
description = Bursty 4k writer (iodepth=1) - random access through 16G file
file_size = 16G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 1
pattern = randwrite

[bursty_writer_2M_d32]
description = Bursty 4k writer (iodepth=32) - random access through 16G file
file_size = 16G
block_size = 2M
runtime = 60
numjobs = 1
iodepth = 32
pattern = randwrite
ioengine = libaio
